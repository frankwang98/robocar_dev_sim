// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: mine_rds.proto

#ifndef PROTOBUF_INCLUDED_mine_5frds_2eproto
#define PROTOBUF_INCLUDED_mine_5frds_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_mine_5frds_2eproto 

namespace protobuf_mine_5frds_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[3];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_mine_5frds_2eproto
namespace robocar_rds {
class Protocol;
class ProtocolDefaultTypeInternal;
extern ProtocolDefaultTypeInternal _Protocol_default_instance_;
class RdsMessage;
class RdsMessageDefaultTypeInternal;
extern RdsMessageDefaultTypeInternal _RdsMessage_default_instance_;
class VehMessage;
class VehMessageDefaultTypeInternal;
extern VehMessageDefaultTypeInternal _VehMessage_default_instance_;
}  // namespace robocar_rds
namespace google {
namespace protobuf {
template<> ::robocar_rds::Protocol* Arena::CreateMaybeMessage<::robocar_rds::Protocol>(Arena*);
template<> ::robocar_rds::RdsMessage* Arena::CreateMaybeMessage<::robocar_rds::RdsMessage>(Arena*);
template<> ::robocar_rds::VehMessage* Arena::CreateMaybeMessage<::robocar_rds::VehMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace robocar_rds {

// ===================================================================

class Protocol : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robocar_rds.Protocol) */ {
 public:
  Protocol();
  virtual ~Protocol();

  Protocol(const Protocol& from);

  inline Protocol& operator=(const Protocol& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Protocol(Protocol&& from) noexcept
    : Protocol() {
    *this = ::std::move(from);
  }

  inline Protocol& operator=(Protocol&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Protocol& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Protocol* internal_default_instance() {
    return reinterpret_cast<const Protocol*>(
               &_Protocol_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Protocol* other);
  friend void swap(Protocol& a, Protocol& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Protocol* New() const final {
    return CreateMaybeMessage<Protocol>(NULL);
  }

  Protocol* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Protocol>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Protocol& from);
  void MergeFrom(const Protocol& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Protocol* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .robocar_rds.VehMessage veh_message = 1;
  bool has_veh_message() const;
  void clear_veh_message();
  static const int kVehMessageFieldNumber = 1;
  private:
  const ::robocar_rds::VehMessage& _internal_veh_message() const;
  public:
  const ::robocar_rds::VehMessage& veh_message() const;
  ::robocar_rds::VehMessage* release_veh_message();
  ::robocar_rds::VehMessage* mutable_veh_message();
  void set_allocated_veh_message(::robocar_rds::VehMessage* veh_message);

  // .robocar_rds.RdsMessage rds_message = 2;
  bool has_rds_message() const;
  void clear_rds_message();
  static const int kRdsMessageFieldNumber = 2;
  private:
  const ::robocar_rds::RdsMessage& _internal_rds_message() const;
  public:
  const ::robocar_rds::RdsMessage& rds_message() const;
  ::robocar_rds::RdsMessage* release_rds_message();
  ::robocar_rds::RdsMessage* mutable_rds_message();
  void set_allocated_rds_message(::robocar_rds::RdsMessage* rds_message);

  // @@protoc_insertion_point(class_scope:robocar_rds.Protocol)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::robocar_rds::VehMessage* veh_message_;
  ::robocar_rds::RdsMessage* rds_message_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mine_5frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class VehMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robocar_rds.VehMessage) */ {
 public:
  VehMessage();
  virtual ~VehMessage();

  VehMessage(const VehMessage& from);

  inline VehMessage& operator=(const VehMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  VehMessage(VehMessage&& from) noexcept
    : VehMessage() {
    *this = ::std::move(from);
  }

  inline VehMessage& operator=(VehMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const VehMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const VehMessage* internal_default_instance() {
    return reinterpret_cast<const VehMessage*>(
               &_VehMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(VehMessage* other);
  friend void swap(VehMessage& a, VehMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline VehMessage* New() const final {
    return CreateMaybeMessage<VehMessage>(NULL);
  }

  VehMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<VehMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const VehMessage& from);
  void MergeFrom(const VehMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(VehMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double linear_x = 1;
  void clear_linear_x();
  static const int kLinearXFieldNumber = 1;
  double linear_x() const;
  void set_linear_x(double value);

  // double angular_z = 2;
  void clear_angular_z();
  static const int kAngularZFieldNumber = 2;
  double angular_z() const;
  void set_angular_z(double value);

  // @@protoc_insertion_point(class_scope:robocar_rds.VehMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double linear_x_;
  double angular_z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mine_5frds_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class RdsMessage : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:robocar_rds.RdsMessage) */ {
 public:
  RdsMessage();
  virtual ~RdsMessage();

  RdsMessage(const RdsMessage& from);

  inline RdsMessage& operator=(const RdsMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RdsMessage(RdsMessage&& from) noexcept
    : RdsMessage() {
    *this = ::std::move(from);
  }

  inline RdsMessage& operator=(RdsMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RdsMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RdsMessage* internal_default_instance() {
    return reinterpret_cast<const RdsMessage*>(
               &_RdsMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(RdsMessage* other);
  friend void swap(RdsMessage& a, RdsMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RdsMessage* New() const final {
    return CreateMaybeMessage<RdsMessage>(NULL);
  }

  RdsMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<RdsMessage>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const RdsMessage& from);
  void MergeFrom(const RdsMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(RdsMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // double linear_x = 1;
  void clear_linear_x();
  static const int kLinearXFieldNumber = 1;
  double linear_x() const;
  void set_linear_x(double value);

  // double angular_z = 2;
  void clear_angular_z();
  static const int kAngularZFieldNumber = 2;
  double angular_z() const;
  void set_angular_z(double value);

  // @@protoc_insertion_point(class_scope:robocar_rds.RdsMessage)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  double linear_x_;
  double angular_z_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_mine_5frds_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Protocol

// .robocar_rds.VehMessage veh_message = 1;
inline bool Protocol::has_veh_message() const {
  return this != internal_default_instance() && veh_message_ != NULL;
}
inline void Protocol::clear_veh_message() {
  if (GetArenaNoVirtual() == NULL && veh_message_ != NULL) {
    delete veh_message_;
  }
  veh_message_ = NULL;
}
inline const ::robocar_rds::VehMessage& Protocol::_internal_veh_message() const {
  return *veh_message_;
}
inline const ::robocar_rds::VehMessage& Protocol::veh_message() const {
  const ::robocar_rds::VehMessage* p = veh_message_;
  // @@protoc_insertion_point(field_get:robocar_rds.Protocol.veh_message)
  return p != NULL ? *p : *reinterpret_cast<const ::robocar_rds::VehMessage*>(
      &::robocar_rds::_VehMessage_default_instance_);
}
inline ::robocar_rds::VehMessage* Protocol::release_veh_message() {
  // @@protoc_insertion_point(field_release:robocar_rds.Protocol.veh_message)
  
  ::robocar_rds::VehMessage* temp = veh_message_;
  veh_message_ = NULL;
  return temp;
}
inline ::robocar_rds::VehMessage* Protocol::mutable_veh_message() {
  
  if (veh_message_ == NULL) {
    auto* p = CreateMaybeMessage<::robocar_rds::VehMessage>(GetArenaNoVirtual());
    veh_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robocar_rds.Protocol.veh_message)
  return veh_message_;
}
inline void Protocol::set_allocated_veh_message(::robocar_rds::VehMessage* veh_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete veh_message_;
  }
  if (veh_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      veh_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, veh_message, submessage_arena);
    }
    
  } else {
    
  }
  veh_message_ = veh_message;
  // @@protoc_insertion_point(field_set_allocated:robocar_rds.Protocol.veh_message)
}

// .robocar_rds.RdsMessage rds_message = 2;
inline bool Protocol::has_rds_message() const {
  return this != internal_default_instance() && rds_message_ != NULL;
}
inline void Protocol::clear_rds_message() {
  if (GetArenaNoVirtual() == NULL && rds_message_ != NULL) {
    delete rds_message_;
  }
  rds_message_ = NULL;
}
inline const ::robocar_rds::RdsMessage& Protocol::_internal_rds_message() const {
  return *rds_message_;
}
inline const ::robocar_rds::RdsMessage& Protocol::rds_message() const {
  const ::robocar_rds::RdsMessage* p = rds_message_;
  // @@protoc_insertion_point(field_get:robocar_rds.Protocol.rds_message)
  return p != NULL ? *p : *reinterpret_cast<const ::robocar_rds::RdsMessage*>(
      &::robocar_rds::_RdsMessage_default_instance_);
}
inline ::robocar_rds::RdsMessage* Protocol::release_rds_message() {
  // @@protoc_insertion_point(field_release:robocar_rds.Protocol.rds_message)
  
  ::robocar_rds::RdsMessage* temp = rds_message_;
  rds_message_ = NULL;
  return temp;
}
inline ::robocar_rds::RdsMessage* Protocol::mutable_rds_message() {
  
  if (rds_message_ == NULL) {
    auto* p = CreateMaybeMessage<::robocar_rds::RdsMessage>(GetArenaNoVirtual());
    rds_message_ = p;
  }
  // @@protoc_insertion_point(field_mutable:robocar_rds.Protocol.rds_message)
  return rds_message_;
}
inline void Protocol::set_allocated_rds_message(::robocar_rds::RdsMessage* rds_message) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete rds_message_;
  }
  if (rds_message) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      rds_message = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, rds_message, submessage_arena);
    }
    
  } else {
    
  }
  rds_message_ = rds_message;
  // @@protoc_insertion_point(field_set_allocated:robocar_rds.Protocol.rds_message)
}

// -------------------------------------------------------------------

// VehMessage

// double linear_x = 1;
inline void VehMessage::clear_linear_x() {
  linear_x_ = 0;
}
inline double VehMessage::linear_x() const {
  // @@protoc_insertion_point(field_get:robocar_rds.VehMessage.linear_x)
  return linear_x_;
}
inline void VehMessage::set_linear_x(double value) {
  
  linear_x_ = value;
  // @@protoc_insertion_point(field_set:robocar_rds.VehMessage.linear_x)
}

// double angular_z = 2;
inline void VehMessage::clear_angular_z() {
  angular_z_ = 0;
}
inline double VehMessage::angular_z() const {
  // @@protoc_insertion_point(field_get:robocar_rds.VehMessage.angular_z)
  return angular_z_;
}
inline void VehMessage::set_angular_z(double value) {
  
  angular_z_ = value;
  // @@protoc_insertion_point(field_set:robocar_rds.VehMessage.angular_z)
}

// -------------------------------------------------------------------

// RdsMessage

// double linear_x = 1;
inline void RdsMessage::clear_linear_x() {
  linear_x_ = 0;
}
inline double RdsMessage::linear_x() const {
  // @@protoc_insertion_point(field_get:robocar_rds.RdsMessage.linear_x)
  return linear_x_;
}
inline void RdsMessage::set_linear_x(double value) {
  
  linear_x_ = value;
  // @@protoc_insertion_point(field_set:robocar_rds.RdsMessage.linear_x)
}

// double angular_z = 2;
inline void RdsMessage::clear_angular_z() {
  angular_z_ = 0;
}
inline double RdsMessage::angular_z() const {
  // @@protoc_insertion_point(field_get:robocar_rds.RdsMessage.angular_z)
  return angular_z_;
}
inline void RdsMessage::set_angular_z(double value) {
  
  angular_z_ = value;
  // @@protoc_insertion_point(field_set:robocar_rds.RdsMessage.angular_z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace robocar_rds

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_mine_5frds_2eproto
